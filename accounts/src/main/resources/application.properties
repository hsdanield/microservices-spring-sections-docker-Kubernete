spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

server.port=8080

spring.application.name=accounts
spring.profiles.active=prod
spring.config.import=optional:configserver:http://localhost:8071/

management.endpoints.web.exposure.include=*

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka/

## Configuring info endpoint
management.info.env.enabled=true
info.app.name=Accounts Microservice
info.app.description=Eazy Bank Accounts Application
info.app.version=1.0.0

endpoints.shutdown.enabled=true
management.endpoint.shutdown.enabled=true

#circuitbreaker
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
### numero de solicitacoes para levar em consideracao
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.minimumNumberOfCalls=5
### se 50% das 5 tentativas falhar significa que o circuitbroker sera acionado
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.failureRateThreshold=50
### 30 segundos
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.waitDurationInOpenState=30000
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.permittedNumberOfCallsInHalfOpenState=2

resilience4j.circuitbreaker.instances.circuitBreakGatewayHeaderCustomer.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.circuitBreakGatewayHeaderCustomer.failureRateThreshold=50
resilience4j.circuitbreaker.instances.circuitBreakGatewayHeaderCustomer.waitDurationInOpenState=30000
resilience4j.circuitbreaker.instances.circuitBreakGatewayHeaderCustomer.permittedNumberOfCallsInHalfOpenState=2
####################################################################################################################

# retry Se apos três tentativas de duracao de 2 segundos nao receber resposta, invoca o metodo fallback
resilience4j.retry.configs.default.registerHealthIndicator=true
resilience4j.retry.instances.retryForCustomerDetails.maxRetryAttempts=3
resilience4j.retry.instances.retryForCustomerDetails.waitDuration=2000

resilience4j.retry.instances.retryForCustomerGatewayHeader.maxRetryAttempts=3
resilience4j.retry.instances.retryForCustomerGatewayHeader.waitDuration=2000
####################################################################################################################

resilience4j.ratelimiter.configs.default.registerHealthIndicator= true
resilience4j.ratelimiter.instances.sayHello.timeoutDuration=5000
resilience4j.ratelimiter.instances.sayHello.limitRefreshPeriod=5000
#Accept one request for the time
resilience4j.ratelimiter.instances.sayHello.limitForPeriod=1

spring.sleuth.sampler.percentage=1
spring.zipkin.baseUrl=http://localhost:9411/
#spring.zipkin.sender.type=rabbit
#spring.zipkin.rabbitmq.queue=zipkin
#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest